Postgres

1.Easy: Retrieve all records from the "customer" table.
2.Easy: Find the total number of customers in the "customer" table.
3.Easy: List the unique film categories available in the "film" table.
4.Intermediate: Display the names of customers who have rented a film in the last 30 days.
5.Intermediate: Calculate the average rental duration of all films in the "film" table.
6.Intermediate: Find the film title(s) with the highest replacement cost.
7.Difficult: List the top 5 customers with the highest total rental payments.
8.Difficult: Find the actors who have appeared in at least 20 different films.
9.Difficult: Identify the most frequently rented film category.
10.Challenging: List films that have not been rented in the last 90 days.

postgresql://postgres:VSWxmc4V4NZKiR9o@db.ijrestperufpxzkzonfk.supabase.co:5432/postgres
Sqlite

Easy:
1.Retrieve all records from the "Customer" table.
2.Find the total number of customers in the "Customer" table.
3.List all tracks from the "Track" table that belong to a specific album (you can specify an album title or ID).
Intermediate:
4. the names of customers who have made at least one purchase (invoices) in the "Invoice" table.
5.Calculate the total revenue generated by the store. (Hint: You'll need to join multiple tables.)
6.Find the artist who has the most tracks in the "Track" table.
Difficult:
7.List all albums that have no tracks. (Hint: You'll need to use a subquery.)
8.Find the customer who has spent the most money at the store.
9.Identify the genre with the highest number of tracks.
Challenging:
10.List the top 10 customers who have spent the most money at the store.